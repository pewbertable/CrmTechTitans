@using CrmTechTitans.Models.Enumerations
@model IEnumerable<CrmTechTitans.Models.Opportunity>

@{
    ViewData["Title"] = "All Opportunities";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<partial name="_Notification" />

<div class="container-fluid">
    <header class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1>All Opportunities</h1>
        <div class="d-flex align-items-center gap-3">
            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
            {
                <a asp-action="Create" class="btn btn-primary" data-bs-toggle="tooltip" title="Add a new Opportunity to the system">
                    <i class="fas fa-plus"></i> Create New Opportunity
                </a>
            }
        </div>
    </header>

   

    <!-- Filter Section -->
    <section class="filter-container bg-light p-3 rounded mb-4">
        <div class="row">
            <!-- Filters on the left -->
            <div class="col-md-8">
                <div class="d-flex flex-column flex-md-row gap-3">
                    <div class="filter-item flex-grow-1">
                        <label for="statusFilter" class="form-label">Filter by Status</label>
                        <select id="statusFilter" class="form-control">
                            <option value="">All Statuses</option>
                            @foreach (var status in Enum.GetValues(typeof(Status)))
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                    </div>
                    <div class="filter-item flex-grow-1">
                        <label for="priorityFilter" class="form-label">Filter by Priority</label>
                        <select id="priorityFilter" class="form-control">
                            <option value="">All Priorities</option>
                            @foreach (var priority in Enum.GetValues(typeof(PriorityType)))
                            {
                                <option value="@priority">@priority</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- Filtered By Indicator on the right -->
            <div class="col-md-4 d-flex align-items-end justify-content-end">
                <div id="filterStatus" class="mt-md-0 mt-3">
                    <span class="text-secondary fs-6">
                        <i class="fas fa-filter me-1"></i> Filtered by: <span id="activeFilters">No filters</span>
                    </span>
                </div>
            </div>
        </div>
    </section>

    <!-- Opportunities Table -->
    <section class="table-responsive">
        <!-- Helper text for sorting -->
        <div class="alert alert-info d-flex align-items-center py-2" role="alert">
            <i class="fas fa-info-circle me-2"></i>
            Click on column headers to sort the table.
        </div>

        <table class="table custom-table" id="opportunitiesTable">
            <thead>
                <tr>
                    <th class="sortable">Title <i class="fas fa-sort"></i></th>
                    <th class="sortable">Member <i class="fas fa-sort"></i></th>
                    <th class="sortable">Priority <i class="fas fa-sort"></i></th>
                    <th class="sortable">Status <i class="fas fa-sort"></i></th>
                    <th class="sortable">Close Date <i class="fas fa-sort"></i></th>
                    <th class="text-center actions-column">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td data-bs-toggle="tooltip" title="@item.Title">@item.Title</td>
                        <td data-bs-toggle="tooltip" title="@(item.MemberOpportunities.Any() ? 
                            string.Join(", ", item.MemberOpportunities
                                .Where(mo => mo.Member != null)
                                .Select(mo => mo.Member.MemberName)) : 
                            "No Member Associated")">
                            @(item.MemberOpportunities.Any() ? 
                            string.Join(", ", item.MemberOpportunities
                                .Where(mo => mo.Member != null)
                                .Select(mo => mo.Member.MemberName)) : 
                            "No Member Associated")
                        </td>
                        <td>@(item.Priority)</td>
                        <td>@Html.DisplayFor(modelItem => item.Status)</td>
                        <td>@(DateTime.Now.AddDays(30).ToString("yyyy-MM-dd"))</td>
                        <td class="text-center actions-column">
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View opportunity details">Details</a>
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="Edit opportunity">Edit</a>
                                <a asp-action="Delete" asp-route-id="@item.ID" class="btn btn-sm btn-danger" data-bs-toggle="tooltip" title="Delete opportunity">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    <!-- Pagination Controls -->
    <div class="row mt-4">
        <!-- Records per page -->
        <div class="col-md-4">
            <label for="recordsPerPage">Records per page:</label>
            <select id="recordsPerPage" class="form-control">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
        </div>
        <!-- Pagination Controls -->
        <div id="paginationControls" class="col-md-8 d-flex justify-content-end align-items-center gap-3">
            <button id="prevPage" class="btn btn-primary pagination-btn">Previous</button>
            <span id="pageInfo" class="pagination-info">Page 1 of 1 (0 records)</span>
            <button id="nextPage" class="btn btn-primary pagination-btn">Next</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var currentPage = 1;
            var recordsPerPage = parseInt($('#recordsPerPage').val());

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Function to get visible rows (rows not hidden by filter)
            function getVisibleRows() {
                var statusFilter = $('#statusFilter').val().toLowerCase();
                var priorityFilter = $('#priorityFilter').val().toLowerCase();

                var visibleRows = $('#opportunitiesTable tbody tr').filter(function () {
                    var statusText = $(this).find('td:nth-child(4)').text().toLowerCase();
                    var priorityText = $(this).find('td:nth-child(3)').text().toLowerCase();

                    var statusMatch = statusFilter === "" || statusText.includes(statusFilter);
                    var priorityMatch = priorityFilter === "" || priorityText.includes(priorityFilter);

                    return statusMatch && priorityMatch;
                });

                return visibleRows;
            }

            // Function to show the current page
            function showPage(page) {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                // Ensure currentPage is within valid range
                if (page < 1) page = 1;
                if (page > totalPages) page = totalPages;

                var startIndex = (page - 1) * recordsPerPage;
                var endIndex = startIndex + recordsPerPage;

                // Hide all rows first
                $('#opportunitiesTable tbody tr').hide();

                // Show only the rows for the current page
                visibleRows.slice(startIndex, endIndex).show();

                // Update page info
                $('#pageInfo').text(`Page ${page} of ${totalPages} (${visibleRows.length} records)`);

                // Enable/disable pagination buttons
                $('#prevPage').prop('disabled', page === 1);
                $('#nextPage').prop('disabled', page === totalPages || visibleRows.length === 0);
            }

            // Function to update pagination
            window.updatePagination = function() {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage > totalPages) {
                    currentPage = totalPages > 0 ? totalPages : 1;
                }

                showPage(currentPage);
            }

            // Event listener for records per page dropdown
            $('#recordsPerPage').on('change', function () {
                recordsPerPage = parseInt($(this).val());
                currentPage = 1; // Reset to the first page
                updatePagination();
            });

            // Event listener for previous page button
            $('#prevPage').on('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            // Event listener for next page button
            $('#nextPage').on('click', function () {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });

            // Filter function
            function filterTable() {
                currentPage = 1; // Reset to the first page
                updatePagination();
            }

            // Attach filter function to input events
            $('#statusFilter, #priorityFilter').on('change', filterTable);
            
            // Update filter status indicators whenever filters change
            function updateFilterStatus() {
                var activeFilters = [];
                
                // Check if status filter is active
                var statusFilter = $('#statusFilter').val();
                if (statusFilter && statusFilter !== '') {
                    activeFilters.push('Status: "' + $('#statusFilter option:selected').text() + '"');
                }
                
                // Check if priority filter is active
                var priorityFilter = $('#priorityFilter').val();
                if (priorityFilter && priorityFilter !== '') {
                    activeFilters.push('Priority: "' + $('#priorityFilter option:selected').text() + '"');
                }
                
                // Update the filter status display
                if (activeFilters.length > 0) {
                    $('#activeFilters').text(activeFilters.join(', '));
                } else {
                    $('#activeFilters').text('No filters');
                }
                $('#filterStatus').show();
            }
            
            // Call updateFilterStatus whenever filters change
            $('#statusFilter, #priorityFilter').on('change', function() {
                updateFilterStatus();
            });
            
            // Initialize filter status on page load
            updateFilterStatus();

            // Initial page load
            updatePagination();
            
            // Listen for sort-complete event to update display
            document.addEventListener('sort-complete', updatePagination);
        });
    </script>

    <style>
        /* Pagination button styling */
        .pagination-btn {
            min-width: 100px;
            width: 100px;
            height: 38px;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.375rem 0.75rem;
        }

        .pagination-info {
            font-size: 14px;
            color: #6c757d;
            padding: 0 10px;
        }

        /* Custom alert styling to match the design */
        .alert-info {
            background-color: #e8f4ff;
            border: none;
            color: #2c5282;
            font-size: 14px;
            border-radius: 4px;
        }
    </style>
}