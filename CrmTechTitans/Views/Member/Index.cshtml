@model IEnumerable<CrmTechTitans.Models.Member>
@using CrmTechTitans.Models.Enumerations
@using CrmTechTitans.Utilities

@{
    ViewData["Title"] = "All Members";
}
<partial name="_Notification" />

<div class="container-fluid">
    <header class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1>All Members</h1>

        <div class="d-flex align-items-center gap-3">
            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
            {
                <a asp-action="Create" class="btn btn-primary" data-bs-toggle="tooltip" title="Add a new member to the system">
                    <i class="fas fa-user-plus"></i> Create New Member
                </a>
            }
            <a href="#" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#excelExportModal">
                <i class="fas fa-file-excel"></i> Export to Excel
            </a>
        </div>
    </header>

    <section class="filter-container bg-light p-3 rounded mb-4">
        <div class="row">
            <!-- Filters on the left -->
            <div class="col-md-8">
                <div class="d-flex flex-column flex-md-row gap-3">
                    <div class="filter-item flex-grow-1">
                        <label for="memberNameFilter" class="form-label">Search by Member Name</label>
                        <input type="text" id="memberNameFilter" class="form-control" placeholder="Enter member name">
                    </div>

                    <div class="filter-item flex-grow-1">
                        <label for="membershipStatusFilter" class="form-label">Filter by Member Status</label>
                        <select id="membershipStatusFilter" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="GoodStanding">Good Standing</option>
                            <option value="OutStanding">Out Standing</option>
                            <option value="Cancelled">Archived</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- Filtered By Indicator on the right -->
            <div class="col-md-4 d-flex align-items-end justify-content-end">
                <div id="filterStatus" class="mt-md-0 mt-3">
                    <span class="text-secondary fs-6">
                        <i class="fas fa-filter me-1"></i> Filtered by: <span id="activeFilters">No filters</span>
                    </span>
                </div>
            </div>
        </div>
    </section>
 
    <!-- Helper text for sorting in table view -->
    <div class="alert alert-info d-flex align-items-center py-2 mb-3" role="alert">
        <i class="fas fa-info-circle me-2"></i>
        Click on column headers to sort the table.
    </div>

    <!-- Table view -->
    <section class="table-responsive">
        <table class="table custom-table" id="membersTable">
            <thead>
                <tr>
                    <th>Logo</th>
                    <th class="sortable">Name <i class="fas fa-sort"></i></th>
                    <th class="sortable">Type <i class="fas fa-sort"></i></th>
                    <th class="sortable">Company Size <i class="fas fa-sort"></i></th>
                    <th class="sortable">Member Since <i class="fas fa-sort"></i></th>
                    <th class="sortable">Status <i class="fas fa-sort"></i></th>
                    <th class="text-center actions-column">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-name="@item.MemberName.ToLower()" data-status="@item.MembershipStatus.ToString().ToLower()" data-id="@item.ID">
                        <td>
                            <div class="logo-container">
                                @if (item.MemberThumbnail?.Content != null)
                                {
                                    string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
                                    string imageSrc = string.Format("data:{0};base64,{1}", item.MemberThumbnail.MimeType, imageBase64);
                                    <img src="@imageSrc" alt="@item.MemberName Logo" class="member-logo" />
                                }
                                else
                                {
                                    <div class="placeholder-logo">
                                        <i class="fas fa-building"></i>
                                    </div>
                                }
                            </div>
                        </td>
                        <td data-bs-toggle="tooltip" title="@item.MemberName">@item.MemberName</td>
                        <td data-bs-toggle="tooltip" title="@(item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any() ? string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name)) : "No Membership Type Assigned")">
                            @if (item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any())
                            {
                                @string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name))
                            }
                            else
                            {
                                <span>No Membership Type Assigned</span>
                            }
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.CompanySize)</td>

                        <td class="dateColumn">
                             @(item.MemberSince != DateTime.MinValue ? item.MemberSince.ToShortDateString() : "N/A") @* Added check for default DateTime *@
                        </td>

                        <td><span class="status-badge status-@item.MembershipStatus.ToString().ToLower()">@Html.DisplayFor(modelItem => item.MembershipStatus)</span></td>
                        <td class="text-center actions-column">
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member edit page">Edit</a>
                            }
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member details">Details</a>
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a href="javascript:void(0);"
                                   class="btn btn-sm archive-btn @(item.MembershipStatus == MembershipStatus.Cancelled ? "btn-success" : "btn-danger")"
                                   data-id="@item.ID"
                                   data-status="@item.MembershipStatus.ToString()"
                                   data-bs-toggle="tooltip"
                                   title="@(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive Member" : "Archive Member")">
                                    @(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive" : "Archive")
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    <!-- Pagination Controls -->
    <div class="row mt-4">
        <!-- Records per page -->
        <div class="col-md-4">
            <label for="recordsPerPage">Records per page:</label>
            <select id="recordsPerPage" class="form-control">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
        </div>
        <!-- Pagination Controls -->
        <div id="paginationControls" class="col-md-8 d-flex justify-content-end align-items-center gap-3">
            <button id="prevPage" class="btn btn-primary pagination-btn">Previous</button>
            <span id="pageInfo" class="pagination-info">Page 1 of 1 (0 records)</span> @* Default/placeholder *@
            <button id="nextPage" class="btn btn-primary pagination-btn">Next</button>
        </div>
    </div>
</div>

<!-- Excel Export Modal (Updated to match Contact/Index logic) -->
<div class="modal fade" id="excelExportModal" tabindex="-1" aria-labelledby="excelExportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="excelExportModalLabel">Export Members to Excel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="downloadForm" method="post" asp-action="DownloadMembers">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Select Members:</h6>
                             <div class="form-check mb-2">
                                 @* This is the TRUE Select All (DownloadAll=true) *@
                                <input class="form-check-input" type="checkbox" id="selectAllMembersDb" name="DownloadAll" value="true"> @* Changed ID *@
                                <label class="form-check-label" for="selectAllMembersDb">Select All Members (Entire Database)</label> @* Changed Text/For *@
                            </div>
                            <div class="form-check mb-2" id="selectFilteredContainer" style="display: none;"> @* Initially hidden *@
                                <input class="form-check-input" type="checkbox" id="selectFilteredMembers">
                                <label class="form-check-label" for="selectFilteredMembers">Select Filtered Members</label>
                            </div>
                             @* Changed ID and list generation logic *@
                            <div id="memberList" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; border-radius: 4px;">
                                @foreach (var member in Model) @* Changed variable *@
                                {
                                    <div class="form-check">
                                        @* Name attribute added/removed by JS before submit *@
                                        <input class="form-check-input member-checkbox" @* Changed class *@
                                               type="checkbox"
                                               value="@member.ID" @* Changed variable *@
                                               id="member-@member.ID"> @* Changed ID/variable, Removed data attributes *@
                                        <label class="form-check-label" for="member-@member.ID">@member.MemberName</label> @* Changed ID/variable *@
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Select Fields:</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="selectAllFields">
                                <label class="form-check-label" for="selectAllFields">Select All Fields</label>
                            </div>
                            @* Field checkboxes remain largely the same, ensure IDs and values are correct *@
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MemberName" id="field-MemberName" checked>
                                <label class="form-check-label" for="field-MemberName">Member Name</label>
                            </div>
                             <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MembershipType" id="field-MembershipType">
                                <label class="form-check-label" for="field-MembershipType">Membership Type</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="CompanySize" id="field-CompanySize">
                                <label class="form-check-label" for="field-CompanySize">Company Size</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Website" id="field-Website">
                                <label class="form-check-label" for="field-Website">Website</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MembershipStatus" id="field-MembershipStatus" checked>
                                <label class="form-check-label" for="field-MembershipStatus">Membership Status</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="ContactedBy" id="field-ContactedBy">
                                <label class="form-check-label" for="field-ContactedBy">Contacted By</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MemberSince" id="field-MemberSince">
                                <label class="form-check-label" for="field-MemberSince">Member Since</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Notes" id="field-Notes">
                                <label class="form-check-label" for="field-Notes">Notes</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Industries" id="field-Industries">
                                <label class="form-check-label" for="field-Industries">Industries</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="StreetAddress" id="field-StreetAddress"> @* Updated Value *@
                                <label class="form-check-label" for="field-StreetAddress">Street Address</label> @* Updated Label *@
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="City" id="field-City">
                                <label class="form-check-label" for="field-City">City</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Province" id="field-Province">
                                <label class="form-check-label" for="field-Province">Province</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="PostalCode" id="field-PostalCode">
                                <label class="form-check-label" for="field-PostalCode">Postal Code</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="AssociatedContacts" id="field-AssociatedContacts">
                                <label class="form-check-label" for="field-AssociatedContacts">Associated Contacts</label>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Download Excel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Script largely copied and adapted from Contact/Index.cshtml
        $(document).ready(function () {
            var currentPage = 1;
            var recordsPerPage = parseInt($('#recordsPerPage').val());
            var tableBody = $('#membersTable tbody'); // Changed ID
            var rows = tableBody.find('tr').toArray(); // Get all rows initially

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // --- Filtering Logic ---
            function filterTableRows() {
                var memberNameFilter = $('#memberNameFilter').val().toLowerCase(); // Changed ID
                var statusFilter = $('#membershipStatusFilter').val()?.toLowerCase() || ""; // Changed ID
                var filteredRows = [];

                rows.forEach(function(row) {
                    var jqRow = $(row);
                    var name = jqRow.data('name') || ''; // Changed data attribute
                    var status = jqRow.data('status') || ''; // Changed data attribute
                    
                    var nameMatch = memberNameFilter === "" || name.includes(memberNameFilter);
                    var statusMatch = statusFilter === "" || status.includes(statusFilter);
                    
                    if (nameMatch && statusMatch) {
                        filteredRows.push(row);
                        jqRow.show(); // Show if matches
                    } else {
                        jqRow.hide(); // Hide if doesn't match
                    }
                });
                return filteredRows; // Return only the rows that match the filter
            }

            // --- Pagination Logic ---
            function displayPage(page, filteredRows) {
                var totalFilteredRecords = filteredRows.length;
                var totalPages = Math.ceil(totalFilteredRecords / recordsPerPage) || 1;
                currentPage = page; // Update current page

                // Ensure currentPage is within valid range
                if (currentPage < 1) currentPage = 1;
                if (currentPage > totalPages) currentPage = totalPages;

                var startIndex = (currentPage - 1) * recordsPerPage;
                var endIndex = startIndex + recordsPerPage;

                // Hide all rows first, then show only the ones for the current page *from the filtered set*
                $(rows).hide(); // Hide all original rows
                $(filteredRows).slice(startIndex, endIndex).show(); // Show only the slice of filtered rows

                // Update pagination info
                $('#pageInfo').text(`Page ${currentPage} of ${totalPages} (${totalFilteredRecords} records)`);
                $('#prevPage').prop('disabled', currentPage === 1);
                $('#nextPage').prop('disabled', currentPage === totalPages || totalFilteredRecords === 0);
            }

            // --- Combined Update Function ---
            function updateTableDisplay() {
                 var currentlyFilteredRows = filterTableRows();
                 displayPage(currentPage, currentlyFilteredRows);
                 updateFilterStatus(); // Update the 'Filtered by' text
                 
                 // Update modal visibility if open - based on the *filtered* rows
                 if ($('#excelExportModal').hasClass('show')) {
                     updateModalMemberVisibility(currentlyFilteredRows); // Changed function name
                     // Always uncheck "Select Filtered" when filters change
                     $('#selectFilteredMembers').prop('checked', false); // Changed ID
                 }
            }

             // Function to update the "Filtered by" text
             function updateFilterStatus() {
                 var memberNameFilter = $('#memberNameFilter').val().trim(); // Changed ID
                 var statusFilter = $('#membershipStatusFilter').val(); // Changed ID
                 var statusFilterText = statusFilter ? $('#membershipStatusFilter option:selected').text() : "";
                 var activeFilters = [];
                 if (memberNameFilter !== '') activeFilters.push('Member Name: ' + memberNameFilter);
                 if (statusFilter !== '') activeFilters.push('Status: ' + statusFilterText);
                 
                 if (activeFilters.length > 0) {
                     $('#activeFilters').text(activeFilters.join(', '));
                 } else {
                     $('#activeFilters').text('No filters');
                 }
                 $('#filterStatus').show();
             }

            // --- Event Listeners ---
            // Filter inputs
            $('#memberNameFilter').on('input', function() { // Text input
                currentPage = 1; // Reset to page 1 when filters change
                updateTableDisplay();
            });
             $('#membershipStatusFilter').on('change', function() { // Dropdown
                currentPage = 1; // Reset to page 1 when filters change
                updateTableDisplay();
            });

            // Records per page
            $('#recordsPerPage').on('change', function () {
                recordsPerPage = parseInt($(this).val());
                currentPage = 1; 
                updateTableDisplay();
            });

            // Pagination buttons
            $('#prevPage').on('click', function () {
                if (currentPage > 1) {
                     var currentlyFilteredRows = filterTableRows(); // Need filtered rows for correct pagination
                    displayPage(currentPage - 1, currentlyFilteredRows);
                }
            });

            $('#nextPage').on('click', function () {
                 var currentlyFilteredRows = filterTableRows(); // Need filtered rows for correct pagination
                 var totalPages = Math.ceil(currentlyFilteredRows.length / recordsPerPage) || 1;
                if (currentPage < totalPages) {
                    displayPage(currentPage + 1, currentlyFilteredRows);
                }
            });
            
            // Listen for sort-complete event (if using separate sort script)
             // document.addEventListener('sort-complete', function() { rows = tableBody.find('tr').toArray(); currentPage = 1; updateTableDisplay(); });

            // --- Excel Export Modal Script (Adapted from Contact Style) ---
            var excelModal = new bootstrap.Modal(document.getElementById('excelExportModal'));
            var downloadForm = $('#downloadForm');
            var selectAllMembersDb = $('#selectAllMembersDb'); // Changed ID
            var selectFilteredMembers = $('#selectFilteredMembers'); // Changed ID
            var selectAllFields = $('#selectAllFields');
            var memberCheckboxes = $('.member-checkbox'); // Changed class
            var fieldCheckboxes = $('.field-checkbox');
            var memberListContainer = $('#memberList'); // Changed ID

             // Helper to get IDs of members currently matching the main page filter
             function getFilteredMemberIds() { // Changed function name
                 var filteredIds = [];
                 rows.forEach(function(row) { // Iterate over all original rows
                     var jqRow = $(row);
                      // Check if the row matches the current filters
                      var memberNameFilter = $('#memberNameFilter').val().toLowerCase(); // Changed ID
                      var statusFilter = $('#membershipStatusFilter').val()?.toLowerCase() || ""; // Changed ID
                      var name = jqRow.data('name') || ''; // Changed data attribute
                      var status = jqRow.data('status') || ''; // Changed data attribute
                      var nameMatch = memberNameFilter === "" || name.includes(memberNameFilter);
                      var statusMatch = statusFilter === "" || status.includes(statusFilter);

                      if (nameMatch && statusMatch) {
                          var id = jqRow.data('id');
                          if(id) filteredIds.push(id.toString());
                      }
                 });
                 return filteredIds;
             }

             // Update modal list visibility and Select Filtered availability
             function updateModalMemberVisibility() { // Changed function name
                 var filteredIds = getFilteredMemberIds(); // Changed function name
                 var anyFiltered = filteredIds.length > 0 && filteredIds.length < rows.length; // Filter is active and effective

                 memberCheckboxes.each(function() { // Changed variable
                     var checkbox = $(this);
                     var memberId = checkbox.val(); // Changed variable name
                     // Always show all checkboxes in the modal list
                     checkbox.closest('.form-check').show(); 
                 });

                 // Show/hide the "Select Filtered" option based on whether filters are active
                 $('#selectFilteredContainer').toggle(anyFiltered);
                 if (!anyFiltered) {
                     selectFilteredMembers.prop('checked', false); // Changed ID
                 }
             }

             // When the modal is shown, update visibility of 'Select Filtered' option
             $('#excelExportModal').on('show.bs.modal', function () {
                 updateModalMemberVisibility(); // Changed function name
                 // Reset checkboxes
                 selectAllMembersDb.prop('checked', false); // Changed ID
                 selectFilteredMembers.prop('checked', false); // Changed ID
                 selectAllFields.prop('checked', false);
                 memberCheckboxes.prop('checked', false).prop('disabled', false); // Changed variable
                 fieldCheckboxes.prop('checked', false);
                 // Default checked fields for Member
                 $('#field-MemberName').prop('checked', true);
                 $('#field-MembershipStatus').prop('checked', true);
                 // Add other defaults if desired
                 updateMemberSelectionState(); // Changed function name
             });

             // Handle TRUE "Select All" (DownloadAll=true)
             selectAllMembersDb.on('change', function () { // Changed ID
                 var isChecked = $(this).prop('checked');
                 // If checked, uncheck and disable individual/filtered options
                 if (isChecked) {
                     selectFilteredMembers.prop('checked', false); // Changed ID
                     memberCheckboxes.prop('checked', false); // Changed variable
                 }
                 updateMemberSelectionState(); // Changed function name
             });

             // Handle "Select Filtered" checkbox
             selectFilteredMembers.on('change', function () { // Changed ID
                 var isChecked = $(this).prop('checked');
                 var filteredIds = getFilteredMemberIds(); // Changed function name

                 memberCheckboxes.prop('checked', false); // Uncheck all first // Changed variable
                 if (isChecked) {
                     memberCheckboxes.each(function() { // Changed variable
                         if (filteredIds.includes($(this).val())) {
                             $(this).prop('checked', true);
                         }
                     });
                      selectAllMembersDb.prop('checked', false); // Uncheck true "Select All" // Changed ID
                 }
                 updateMemberSelectionState(); // Changed function name
             });

             // Handle individual member checkbox changes
             memberCheckboxes.on('change', function() { // Changed variable
                 selectAllMembersDb.prop('checked', false); // Changed ID
                 selectFilteredMembers.prop('checked', false); // Changed ID
                 updateMemberSelectionState(); // Changed function name
             });

             // Update enable/disable state of checkboxes
             function updateMemberSelectionState() { // Changed function name
                 var disableIndividual = selectAllMembersDb.prop('checked'); // Changed ID
                 memberCheckboxes.prop('disabled', disableIndividual); // Changed variable
                 selectFilteredMembers.prop('disabled', disableIndividual); // Changed ID
                 memberListContainer.toggle(!disableIndividual); // Hide list if true "Select All" is checked // Changed ID
                 // Show/hide filtered container based on filtering state AND true select all
                 updateModalMemberVisibility(); // Changed function name
             }

             // Handle "Select All Fields"
             selectAllFields.on('change', function () {
                 fieldCheckboxes.prop('checked', $(this).prop('checked'));
             });

             // Handle individual field checkbox changes
             fieldCheckboxes.on('change', function() {
                 if (!$(this).prop('checked')) {
                     selectAllFields.prop('checked', false);
                 } else {
                     if ($('.field-checkbox:checked').length === fieldCheckboxes.length) {
                         selectAllFields.prop('checked', true);
                     }
                 }
             });

            // Handle form submission (restored logic, adapted for Member)
            downloadForm.on('submit', function (e) {
                if ($('.field-checkbox:checked').length === 0) {
                    e.preventDefault();
                    alert('Please select at least one field to export.');
                    return;
                }
                
                // If true "Select All" is NOT checked, ensure at least one individual member is checked
                if (!selectAllMembersDb.prop('checked') && $('.member-checkbox:checked').length === 0) { // Changed ID and class
                     e.preventDefault();
                     alert('Please select at least one member to export, or choose "Select All Members".'); // Changed text
                     return;
                 }

                 // Prepare form based on whether true "Select All" is checked
                 if (selectAllMembersDb.prop('checked')) { // Changed ID
                     // Ensure DownloadAll=true is submitted
                     if (!$('#selectAllMembersDb[name="DownloadAll"]').length) { // Changed ID
                          $('<input>').attr({ type: 'hidden', name: 'DownloadAll', value: 'true' }).appendTo(downloadForm);
                     } else {
                           $('#selectAllMembersDb').prop('checked', true); // Changed ID
                     }
                     // Remove individual IDs as they are not needed
                     $('input.member-checkbox[name="SelectedMemberIds"]').remove(); // Changed class and name
                 } else {
                      // Ensure DownloadAll=false is submitted
                      if ($('#selectAllMembersDb[name="DownloadAll"]').length) { // Changed ID
                           $('#selectAllMembersDb').prop('checked', false); // Changed ID
                      }
                       // Add hidden input if it doesn't exist
                      if ($('input[type="hidden"][name="DownloadAll"]').length === 0) {
                           $('<input>').attr({ type: 'hidden', name: 'DownloadAll', value: 'false' }).appendTo(downloadForm);
                      } else {
                           $('input[type="hidden"][name="DownloadAll"]').val('false');
                      }

                       // Ensure only checked members have the name attribute for submission
                       memberCheckboxes.each(function() { // Changed variable
                           var cb = $(this);
                           if (!cb.prop('checked')) {
                               cb.removeAttr('name'); 
                           } else {
                               cb.attr('name', 'SelectedMemberIds'); // Changed name
                           }
                       });
                 }
                 // excelModal.hide(); // Optionally hide modal
            });
            
             // Initial setup calls
             updateTableDisplay(); // Use combined update function

             // --- Archive/Unarchive Confirmation (Keep existing logic) ---
             $('.archive-btn').click(function (event) {
                event.preventDefault(); // Prevent default link behavior
                var button = $(this);
                var memberId = button.data('id');
                var currentStatus = button.data('status');
                var isArchiving = (currentStatus !== 'Cancelled');
                var actionText = isArchiving ? 'archive' : 'unarchive';
                var confirmMessage = `Are you sure you want to ${actionText} this member?`;

                if (confirm(confirmMessage)) {
                    $.ajax({
                        url: '@Url.Action("ToggleMemberStatus", "Member")', // Adjust the action name if needed
                        type: 'POST',
                        data: { id: memberId },
                        headers: {
                            // Include AntiForgery token for security
                            RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (result) {
                            if (result.success) {
                                // Update the button text and class
                                var newStatus = isArchiving ? 'Cancelled' : 'GoodStanding'; // Determine new status based on action
                                var newButtonText = isArchiving ? 'Unarchive' : 'Archive';
                                var newButtonClass = isArchiving ? 'btn-success' : 'btn-danger';
                                var oldButtonClass = isArchiving ? 'btn-danger' : 'btn-success';

                                button.text(newButtonText);
                                button.removeClass(oldButtonClass).addClass(newButtonClass);
                                button.data('status', newStatus);
                                button.attr('title', isArchiving ? 'Unarchive Member' : 'Archive Member');
                                // Update the tooltip text
                                var tooltipInstance = bootstrap.Tooltip.getInstance(button[0]);
                                if (tooltipInstance) {
                                    tooltipInstance.setContent({ '.tooltip-inner': isArchiving ? 'Unarchive Member' : 'Archive Member' });
                                }
                                
                                // Update the status badge in the table
                                var row = button.closest('tr');
                                var statusBadge = row.find('.status-badge');
                                statusBadge.removeClass(function (index, className) {
                                    return (className.match(/(^|\s)status-\S+/g) || []).join(' ');
                                }).addClass('status-' + newStatus.toLowerCase());
                                statusBadge.text(result.newStatusDisplay); // Use display text from server
                                
                                // Update the data-status on the row for filtering
                                row.data('status', newStatus.toLowerCase());
                                row.attr('data-status', newStatus.toLowerCase());

                                // Optionally re-apply filters/pagination if the status change affects visibility
                                updateTableDisplay(); 

                                // Show success notification (assuming _Notification partial handles TempData)
                                // Add TempData message in controller or use a JS notification library
                                console.log(result.message);
                            } else {
                                alert('Error: ' + result.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error toggling member status:", status, error);
                            alert('An error occurred while updating the member status.');
                        }
                    });
                }
            });

        });
    </script>

    <style>
        /* Pagination button styling */
        .pagination-btn {
            min-width: 100px;
            width: 100px;
            height: 38px;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.375rem 0.75rem;
        }

        .pagination-info {
            font-size: 14px;
            color: #6c757d;
            padding: 0 10px;
        }

        /* Custom alert styling to match the design */
        .alert-info {
            background-color: #e8f4ff;
            border: none;
            color: #2c5282;
            font-size: 14px;
            border-radius: 4px;
        }

         /* Status Badge Styles */
        .status-badge {
            padding: 0.25em 0.6em;
            font-size: 0.75rem;
            font-weight: 700;
            line-height: 1;
            color: #fff;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }

        .status-goodstanding {
            background-color: #4d7556; /* Muted green */
        }

        .status-outstanding {
            background-color: #c7b980; /* Subdued gold */
            color: #333333; /* Darker text for visibility */
        }

        .status-cancelled {
            background-color: #6c757d; /* Gray - already subdued */
        }

    </style>
}