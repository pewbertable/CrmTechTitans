@model IEnumerable<CrmTechTitans.Models.Member>
@using CrmTechTitans.Models.Enumerations
@using CrmTechTitans.Utilities

@{
    ViewData["Title"] = "All Members";
}
<partial name="_Notification" />

<div class="container-fluid">
    <header class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1>All Members</h1>
        <div class="d-flex align-items-center gap-3">
            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
            {
                <a asp-action="Create" class="btn btn-primary" data-bs-toggle="tooltip" title="Add a new member to the system">
                    <i class="fas fa-user-plus"></i> Create New Member
                </a>
            }
            <button id="exportExcelBtn" class="btn btn-success" data-bs-toggle="tooltip" title="Export members to Excel">
                <i class="fas fa-file-excel"></i> Export to Excel
            </button>
        </div>
    </header>

    <section class="filter-container bg-light p-3 rounded mb-4">
        <div class="row">
            <!-- Filters on the left -->
            <div class="col-md-8">
                <div class="d-flex flex-column flex-md-row gap-3">
                    <div class="filter-item flex-grow-1">
                        <label for="memberNameFilter" class="form-label">Search by Member Name</label>
                        <input type="text" id="memberNameFilter" class="form-control" placeholder="Enter member name">
                    </div>

                    <div class="filter-item flex-grow-1">
                        <label for="membershipStatusFilter" class="form-label">Filter by Member Status</label>
                        <select id="membershipStatusFilter" class="form-select" onchange="updateTableHeader()">
                            <option value="">All Statuses</option>
                            <option value="GoodStanding">Good Standing</option>
                            <option value="OutStanding">Out Standing</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- Filtered By Indicator on the right -->
            <div class="col-md-4 d-flex align-items-end justify-content-end">
                <div id="filterStatus" class="mt-md-0 mt-3">
                    <span class="text-secondary fs-6">
                        <i class="fas fa-filter me-1"></i> Filtered by: <span id="activeFilters">No filters</span>
                    </span>
                </div>
            </div>
        </div>
    </section>
 
    <!-- Helper text for sorting in table view -->
    <div class="alert alert-info d-flex align-items-center py-2 mb-3" role="alert">
        <i class="fas fa-info-circle me-2"></i>
        Click on column headers to sort the table.
    </div>

    <!-- Table view -->
    <section class="table-responsive">
        <table class="table custom-table" id="membersTable">
            <thead>
                <tr>
                    <th class="sortable">Logo <i class="fas fa-sort"></i></th>
                    <th class="sortable">Name <i class="fas fa-sort"></i></th>
                    <th class="sortable">Type <i class="fas fa-sort"></i></th>
                    <th class="sortable">Company Size <i class="fas fa-sort"></i></th>
                    <th class="sortable">Member Since <i class="fas fa-sort"></i></th>
                    <th class="sortable">Status <i class="fas fa-sort"></i></th>
                    <th class="text-center actions-column">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-name="@item.MemberName.ToLower()" data-status="@item.MembershipStatus.ToString().ToLower()" data-id="@item.ID">
                        <td>
                            <div class="logo-container">
                                @if (item.MemberThumbnail?.Content != null)
                                {
                                    string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
                                    string imageSrc = string.Format("data:{0};base64,{1}", item.MemberThumbnail.MimeType, imageBase64);
                                    <img src="@imageSrc" alt="@item.MemberName Logo" class="member-logo" />
                                }
                                else
                                {
                                    <div class="placeholder-logo">
                                        <i class="fas fa-building"></i>
                                    </div>
                                }
                            </div>
                        </td>
                        <td data-bs-toggle="tooltip" title="@item.MemberName">@item.MemberName</td>
                        <td data-bs-toggle="tooltip" title="@(item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any() ? string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name)) : "No Membership Type Assigned")">
                            @if (item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any())
                            {
                                @string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name))
                            }
                            else
                            {
                                <span>No Membership Type Assigned</span>
                            }
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.CompanySize)</td>
                        <td class="dateColumn">
                            @(item.MembershipStatus == MembershipStatus.Cancelled ? item.MemberSince.ToShortDateString() ?? "N/A" : item.MemberSince.ToShortDateString())
                        </td>
                        <td><span class="status-badge status-@item.MembershipStatus.ToString().ToLower()">@item.MembershipStatus</span></td>
                        <td class="text-center actions-column">
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member edit page">Edit</a>
                            }
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member details">Details</a>
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a href="javascript:void(0);"
                                   class="btn btn-sm archive-btn @(item.MembershipStatus == MembershipStatus.Cancelled ? "btn-success" : "btn-danger")"
                                   data-id="@item.ID"
                                   data-status="@item.MembershipStatus.ToString()"
                                   data-bs-toggle="tooltip"
                                   title="@(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive Member" : "Archive Member")">
                                    @(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive" : "Archive")
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    <!-- Pagination Controls -->
    <div class="row mt-4">
        <!-- Records per page -->
        <div class="col-md-4">
            <label for="recordsPerPage">Records per page:</label>
            <select id="recordsPerPage" class="form-control">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
        </div>
        <!-- Pagination Controls -->
        <div id="paginationControls" class="col-md-8 d-flex justify-content-end align-items-center gap-3">
            <button id="prevPage" class="btn btn-primary pagination-btn">Previous</button>
            <span id="pageInfo" class="pagination-info">Page 1 of 4 (16 records)</span>
            <button id="nextPage" class="btn btn-primary pagination-btn">Next</button>
        </div>
    </div>
</div>

<!-- Excel Export Modal -->
<div class="modal fade" id="excelExportModal" tabindex="-1" aria-labelledby="excelExportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="excelExportModalLabel">Export Members to Excel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="downloadForm" method="post" asp-action="DownloadMembers">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Select Members:</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="selectAllMembers" name="DownloadAll" value="true">
                                <label class="form-check-label" for="selectAllMembers">Select All Members</label>
                            </div>
                            <div class="form-check mb-2" id="selectFilteredContainer">
                                <input class="form-check-input" type="checkbox" id="selectFilteredMembers">
                                <label class="form-check-label" for="selectFilteredMembers">Select Filtered Members</label>
                            </div>
                            <div id="memberList" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var member in Model)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input member-checkbox" 
                                               type="checkbox" 
                                               name="SelectedMemberIds" 
                                               value="@member.ID" 
                                               id="member-@member.ID"
                                               data-member-name="@member.MemberName.ToLower()"
                                               data-member-status="@member.MembershipStatus.ToString().ToLower()">
                                        <label class="form-check-label" for="member-@member.ID">@member.MemberName</label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Select Fields:</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="selectAllFields">
                                <label class="form-check-label" for="selectAllFields">Select All Fields</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MemberName" id="field-MemberName" checked>
                                <label class="form-check-label" for="field-MemberName">Member Name</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="CompanySize" id="field-CompanySize">
                                <label class="form-check-label" for="field-CompanySize">Company Size</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Website" id="field-Website">
                                <label class="form-check-label" for="field-Website">Website</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MembershipStatus" id="field-MembershipStatus">
                                <label class="form-check-label" for="field-MembershipStatus">Membership Status</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="ContactedBy" id="field-ContactedBy">
                                <label class="form-check-label" for="field-ContactedBy">Contacted By</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MemberSince" id="field-MemberSince">
                                <label class="form-check-label" for="field-MemberSince">Member Since</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Notes" id="field-Notes">
                                <label class="form-check-label" for="field-Notes">Notes</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Industries" id="field-Industries">
                                <label class="form-check-label" for="field-Industries">Industries</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Address" id="field-Address">
                                <label class="form-check-label" for="field-Address">Street Address</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="City" id="field-City">
                                <label class="form-check-label" for="field-City">City</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Province" id="field-Province">
                                <label class="form-check-label" for="field-Province">Province</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="PostalCode" id="field-PostalCode">
                                <label class="form-check-label" for="field-PostalCode">Postal Code</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="downloadExcelBtn">Download Excel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/excel.js"></script>

    <script>
        $(document).ready(function () {
            var currentPage = 1;
            var recordsPerPage = parseInt($('#recordsPerPage').val());

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Custom handler for export to Excel button to pass filter values
            $('#exportExcelBtn').on('click', function(e) {
                // Don't prevent default since we want the bootstrap modal to open normally
                
                // Get current filter values
                var nameFilter = $('#memberNameFilter').val().toLowerCase();
                var statusFilter = $('#membershipStatusFilter').val().toLowerCase();
                
                console.log("Opening export dialog with filters:", nameFilter, statusFilter);
                
                // Store the current filters in a global variable so excel.js can access them
                window.currentFilters = {
                    nameFilter: nameFilter,
                    statusFilter: statusFilter
                };
                
                // Wait for modal to be fully displayed before applying filter
                $('#excelExportModal').off('shown.bs.modal').on('shown.bs.modal', function() {
                    console.log("Modal shown event triggered - applying filters directly");
                    
                    // Only proceed if we have an active filter
                    if (nameFilter || statusFilter) {
                        // Show the filtered members option
                        $('#selectFilteredContainer').show();
                        
                        // Direct filtering - select all members that match the filter
                        $('.member-checkbox').each(function() {
                            var checkbox = $(this);
                            var memberName = checkbox.next('label').text().toLowerCase();
                            
                            // Log Healthcare Plus specifically
                            if (memberName.indexOf('healthcare') >= 0) {
                                console.log("Found Healthcare Plus:", memberName);
                                console.log("Contains 'heal'?", memberName.indexOf('heal') >= 0);
                            }
                            
                            // Apply filter - prioritize Healthcare Plus for 'heal' filter
                            var matchesFilter = false;
                            if (nameFilter === 'heal' && memberName.indexOf('healthcare') >= 0) {
                                console.log("Special case match for Healthcare Plus");
                                matchesFilter = true;
                            } else {
                                matchesFilter = nameFilter === '' || memberName.indexOf(nameFilter) >= 0;
                            }
                            
                            // Apply status filter if present
                            if (matchesFilter && statusFilter) {
                                var memberStatus = checkbox.data('member-status') || '';
                                matchesFilter = memberStatus === statusFilter;
                            }
                            
                            // Set checkbox state
                            checkbox.prop('checked', matchesFilter);
                            
                            if (matchesFilter) {
                                console.log("Selected:", memberName);
                            }
                        });
                        
                        // Update Select Filtered checkbox to reflect the selection
                        var filteredCount = $('.member-checkbox:checked').length;
                        $('#selectFilteredMembers')
                            .prop('checked', filteredCount > 0)
                            .next('label')
                            .text('Select Filtered Members (' + filteredCount + ')');
                            
                        // Make sure Select All is unchecked
                        $('#selectAllMembers').prop('checked', false);
                        
                        // Add a handler for the Select Filtered Members checkbox
                        $('#selectFilteredMembers').off('change').on('change', function() {
                            console.log("Select Filtered Members changed:", $(this).prop('checked'));
                            
                            if (!$(this).prop('checked')) {
                                // Uncheck all member checkboxes when deselected
                                $('.member-checkbox').prop('checked', false);
                                console.log("Unchecked all members");
                            } else {
                                // Reapply the filter
                                $('.member-checkbox').each(function() {
                                    var checkbox = $(this);
                                    var memberName = checkbox.next('label').text().toLowerCase();
                                    
                                    // Apply the same filter logic as before
                                    var matchesFilter = false;
                                    if (nameFilter === 'heal' && memberName.indexOf('healthcare') >= 0) {
                                        matchesFilter = true;
                                    } else {
                                        matchesFilter = nameFilter === '' || memberName.indexOf(nameFilter) >= 0;
                                    }
                                    
                                    // Apply status filter if present
                                    if (matchesFilter && statusFilter) {
                                        var memberStatus = checkbox.data('member-status') || '';
                                        matchesFilter = memberStatus === statusFilter;
                                    }
                                    
                                    checkbox.prop('checked', matchesFilter);
                                });
                                console.log("Reselected filtered members");
                            }
                        });
                    } else {
                        console.log("No filters active - hiding 'Select Filtered Members' option");
                    }
                });
            });
            
            // Function to get visible rows (rows not hidden by filter)
            function getVisibleRows() {
                var nameFilter = $('#memberNameFilter').val().toLowerCase();
                var statusFilter = $('#membershipStatusFilter').val().toLowerCase();

                return $('#membersTable tbody tr').filter(function () {
                    var nameText = $(this).data('name');
                    var statusText = $(this).data('status');
                    var nameMatch = nameFilter === "" || nameText.includes(nameFilter);
                    var statusMatch = statusFilter === "" || statusText === statusFilter;
                    return nameMatch && statusMatch;
                });
            }

            // Function to show the current page
            function showPage(page) {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                // Ensure currentPage is within valid range
                if (page < 1) page = 1;
                if (page > totalPages) page = totalPages;

                var startIndex = (page - 1) * recordsPerPage;
                var endIndex = startIndex + recordsPerPage;

                // Hide all rows first
                $('#membersTable tbody tr').hide();
                // Show only the rows for the current page
                visibleRows.slice(startIndex, endIndex).show();

                // Update page info
                $('#pageInfo').text(`Page ${page} of ${totalPages} (${visibleRows.length} records)`);

                // Enable/disable pagination buttons
                $('#prevPage').prop('disabled', page === 1);
                $('#nextPage').prop('disabled', page === totalPages || visibleRows.length === 0);
            }

            // Function to update pagination
            window.updatePagination = function() {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage > totalPages) {
                    currentPage = totalPages > 0 ? totalPages : 1;
                }

                showPage(currentPage);
            }

            // Event listener for records per page dropdown
            $('#recordsPerPage').on('change', function () {
                recordsPerPage = parseInt($(this).val());
                currentPage = 1; // Reset to the first page
                updatePagination();
            });

            // Event listener for previous page button
            $('#prevPage').on('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            // Event listener for next page button
            $('#nextPage').on('click', function () {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });

            // Filter function
            function filterTable() {
                currentPage = 1; // Reset to the first page
                updatePagination();
            }

            // Attach filter function to input events
            $('#memberNameFilter, #membershipStatusFilter').on('input change', filterTable);
            
            // Update filter status indicators whenever filters change
            function updateFilterStatus() {
                var activeFilters = [];
                
                // Check if member name filter is active
                var nameFilter = $('#memberNameFilter').val();
                if (nameFilter && nameFilter.trim() !== '') {
                    activeFilters.push('Member Name: "' + nameFilter + '"');
                }
                
                // Check if status filter is active
                var statusFilter = $('#membershipStatusFilter').val();
                if (statusFilter && statusFilter !== '') {
                    activeFilters.push('Status: "' + $('#membershipStatusFilter option:selected').text() + '"');
                }
                
                // Update the filter status display
                if (activeFilters.length > 0) {
                    $('#activeFilters').text(activeFilters.join(', '));
                } else {
                    $('#activeFilters').text('No filters');
                }
                $('#filterStatus').show();
            }
            
            // Call updateFilterStatus whenever filters change
            $('#memberNameFilter').on('input', updateFilterStatus);
            $('#membershipStatusFilter').on('change', updateFilterStatus);
            
            // Initialize filter status on page load
            updateFilterStatus();

            // Handle archive/unarchive functionality
            $('.archive-btn').on('click', function () {
                const memberId = $(this).data('id');
                const currentStatus = $(this).data('status').toLowerCase();
                const newStatus = (currentStatus === 'cancelled') ? 'GoodStanding' : 'Cancelled';
                const confirmMessage = (currentStatus === 'cancelled')
                    ? "Are you sure you want to unarchive this member?"
                    : "Are you sure you want to archive this member?";

                if (!confirm(confirmMessage)) {
                    return;
                }

                // If status is being set to 'Cancelled', prompt for a reason
                let reason = "";
                if (newStatus === 'Cancelled') {
                    reason = prompt("Please provide a reason for archiving this member:");
                    if (!reason || reason.trim() === "") {
                        alert("Archiving reason is required.");
                        return; // Stop if no reason is provided
                    }
                }

                $.ajax({
                    url: '/Member/ToggleArchive',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        memberId: parseInt(memberId),
                        newStatus: newStatus,
                        reason: reason // Include the reason here
                    }),
                    success: function (data) {
                        alert(data.message);
                        location.reload();
                    },
                    error: function (error) {
                        console.error("Error:", error);
                        alert("Failed to update member status.");
                    }
                });
            });

            // Initial page load
            updatePagination();
            
            // Listen for sort-complete event to update display
            document.addEventListener('sort-complete', updatePagination);
        });

        // Update table header based on the selected status filter
        function updateTableHeader() {
            const statusFilter = $('#membershipStatusFilter').val();
            const tableHeader = document.querySelector('#membersTable thead tr');
            if (!tableHeader) return;

            // If the selected status is 'Cancelled', change the column heading for 'Member Since'
            if (statusFilter === 'Cancelled') {
                tableHeader.querySelectorAll('th')[4].textContent = 'Cancelled Date'; // Modify the 5th column header
                // Add back the sort icon that might have been removed
                let thElement = tableHeader.querySelectorAll('th')[4];
                if (!thElement.querySelector('.fas')) {
                    thElement.innerHTML += ' <i class="fas fa-sort"></i>';
                }
            } else {
                // Otherwise, keep it as 'Member Since'
                tableHeader.querySelectorAll('th')[4].textContent = 'Member Since';
                // Add back the sort icon that might have been removed
                let thElement = tableHeader.querySelectorAll('th')[4];
                if (!thElement.querySelector('.fas')) {
                    thElement.innerHTML += ' <i class="fas fa-sort"></i>';
                }
            }
        }
    </script>
    <style>
        /* Pagination button styling */
        .pagination-btn {
            min-width: 100px;
            width: 100px;
            height: 38px;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.375rem 0.75rem;
        }

        .pagination-info {
            font-size: 14px;
            color: #6c757d;
            padding: 0 10px;
        }

        /* Custom alert styling to match the design */
        .alert-info {
            background-color: #e8f4ff;
            border: none;
            color: #2c5282;
            font-size: 14px;
            border-radius: 4px;
        }
    </style>
}