@model IEnumerable<CrmTechTitans.Models.Member>
@using CrmTechTitans.Models.Enumerations
@using CrmTechTitans.Utilities

@{
    ViewData["Title"] = "All Members";
}
<partial name="_Notification" />

<div class="container-fluid">
    <header class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1>All Members</h1>
        <div class="d-flex align-items-center gap-3">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary active" id="cards-view-btn" data-bs-toggle="tooltip" title="View as cards">
                    <i class="fas fa-th-large"></i>
                </button>
                <button type="button" class="btn btn-outline-primary" id="table-view-btn" data-bs-toggle="tooltip" title="View as table">
                    <i class="fas fa-table"></i>
                </button>
            </div>
            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
            {
                <a asp-action="Create" class="btn btn-primary" data-bs-toggle="tooltip" title="Add a new member to the system">
                    <i class="fas fa-user-plus"></i> Create New Member
                </a>
            }
            <button id="exportExcelBtn" class="btn btn-success" data-bs-toggle="tooltip" title="Export members to Excel">
                <i class="fas fa-file-excel"></i> Export to Excel
            </button>
        </div>
    </header>

    <section class="filter-container bg-light p-3 rounded mb-4">
        <div class="filter-row d-flex align-items-end gap-3">
            <div class="filter-item">
                <label for="memberNameFilter" class="form-label">Search by Member Name</label>
                <input type="text" id="memberNameFilter" class="form-control" placeholder="Enter member name">
            </div>

            <div class="filter-item">
                <label for="membershipStatusFilter" class="form-label">Filter by Member Status</label>
                <select id="membershipStatusFilter" class="form-select">
                    <option value="">All Statuses</option>
                    <option value="GoodStanding">Good Standing</option>
                    <option value="OutStanding">Out Standing</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
        </div>
    </section>

    <section class="members-grid" id="cards-view" style="display: none;">
        @foreach (var item in Model)
        {
            <div class="member-card" data-name="@item.MemberName.ToLower()" data-status="@item.MembershipStatus.ToString().ToLower()">
                <div class="card-logo">
                    @if (item.MemberThumbnail?.Content != null)
                    {
                        string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
                        string imageSrc = string.Format("data:{0};base64,{1}", item.MemberThumbnail.MimeType, imageBase64);
                        <img src="@imageSrc" alt="@item.MemberName Logo" class="img-fluid rounded" />
                    }
                    else
                    {
                        <i class="fas fa-building"></i>
                    }
                </div>
                <div class="card-content">
                    <div class="card-header">
                        <h2 class="company-name">@item.MemberName</h2>
                        <span class="status-badge status-@item.MembershipStatus.ToString().ToLower()">
                            @item.MembershipStatus
                        </span>
                    </div>
                    <div class="card-details">
                        <div class="detail-item">
                            <i class="fas fa-users"></i>
                            <span>@item.CompanySize</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-calendar-alt"></i>
                            <span>Member since @item.MemberSince.ToString("MMM yyyy")</span>
                        </div>
                        @if (!string.IsNullOrEmpty(item.CompanyWebsite))
                        {
                            <div class="detail-item">
                                <i class="fas fa-globe"></i>
                                <a href="@item.CompanyWebsite" target="_blank">Website</a>
                            </div>
                        }
                    </div>
                    <div class="membership-types">
                        <h3>Membership Types:</h3>
                        <p>
                            @if (item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any())
                            {
                                @string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name))
                            }
                            else
                            {
                                <span>No Membership Type Assigned</span>
                            }
                        </p>
                    </div>
                </div>
                <div class="card-actions">
                    <a href="javascript:void(0);"
                       class="btn btn-outline-danger btn-sm archive-btn"
                       data-id="@item.ID"
                       data-status="@item.MembershipStatus.ToString()"
                       data-bs-toggle="tooltip"
                       title="@(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive this member" : "Archive this member")">
                        <!-- Dynamically change the icon based on the status -->
                        <i class="fas fa-archive @(item.MembershipStatus == MembershipStatus.Cancelled ? "fa-undo" : "fa-archive")"></i>
                    </a>
                    <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-outline-primary btn-sm" data-bs-toggle="tooltip" title="View member details">
                        <i class="fas fa-info-circle"></i>
                    </a>
                </div>
            </div>
        }
    </section>
 
    <!-- Helper text for sorting in table view - Now visible -->
    <div class="alert alert-info mb-3" id="table-sort-info">
        <i class="fas fa-info-circle"></i> Click on column headers to sort the table.
    </div>

    <!-- Table view - Now visible -->
    <section class="table-responsive" id="table-view">
        <table class="table custom-table" id="membersTable">
            <thead>
                <tr>
                    <th>Logo</th>
                    <th onclick="sortTable(1)">Name</th>
                    <th onclick="sortTable(2)">Type</th>
                    <th onclick="sortTable(3)">Company Size</th>
                    <th onclick="sortTable(4)">Member Since</th>
                    <th onclick="sortTable(5)">Status</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-name="@item.MemberName.ToLower()" data-status="@item.MembershipStatus.ToString().ToLower()">
                        <td>
                            <div class="logo-container">
                                @if (item.MemberThumbnail?.Content != null)
                                {
                                    string imageBase64 = Convert.ToBase64String(item.MemberThumbnail.Content);
                                    string imageSrc = string.Format("data:{0};base64,{1}", item.MemberThumbnail.MimeType, imageBase64);
                                    <img src="@imageSrc" alt="@item.MemberName Logo" class="member-logo" />
                                }
                                else
                                {
                                    <div class="placeholder-logo">
                                        <i class="fas fa-building"></i>
                                    </div>
                                }
                            </div>
                        </td>
                        <td>@item.MemberName</td>
                        <td>
                            @if (item.MemberMembershipTypes != null && item.MemberMembershipTypes.Any())
                            {
                                @string.Join(", ", item.MemberMembershipTypes.Select(mmt => mmt.MembershipType.Name))
                            }
                            else
                            {
                                <span>No Membership Type Assigned</span>
                            }
                        </td>
                        <td>@item.CompanySize</td>
                        <td class="dateColumn">
                            @(item.MembershipStatus == MembershipStatus.Cancelled ? item.MemberSince.ToShortDateString() ?? "N/A" : item.MemberSince.ToShortDateString())
                        </td>
                        <td><span class="status-badge status-@item.MembershipStatus.ToString().ToLower()">@item.MembershipStatus</span></td>
                        <td class="text-center">
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member edit page">Edit</a>
                            }
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View member details">Details</a>
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a href="javascript:void(0);"
                                   class="btn btn-sm archive-btn @(item.MembershipStatus == MembershipStatus.Cancelled ? "btn-success" : "btn-danger")"
                                   data-id="@item.ID"
                                   data-status="@item.MembershipStatus.ToString()"
                                   data-bs-toggle="tooltip"
                                   title="@(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive Member" : "Archive Member")">
                                    @(item.MembershipStatus == MembershipStatus.Cancelled ? "Unarchive" : "Archive")
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    <!-- Pagination Controls -->
    <div class="row mt-4">
        <!-- Records per page -->
        <div class="col-md-4">
            <label for="recordsPerPage">Records per page:</label>
            <select id="recordsPerPage" class="form-control">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
        </div>
        <!-- Pagination Controls -->
        <div id="paginationControls" class="col-md-8 d-flex justify-content-end align-items-center gap-3">
            <button id="prevPage" class="btn btn-primary pagination-btn">Previous</button>
            <span id="pageInfo" class="pagination-info">Page 1 of 4 (16 records)</span>
            <button id="nextPage" class="btn btn-primary pagination-btn">Next</button>
        </div>
    </div>
</div>

<!-- Excel Export Modal -->
<div class="modal fade" id="excelExportModal" tabindex="-1" aria-labelledby="excelExportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="excelExportModalLabel">Export Members to Excel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="downloadForm" method="post" asp-action="DownloadMembers">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Select Members:</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="selectAllMembers" name="DownloadAll" value="true">
                                <label class="form-check-label" for="selectAllMembers">Select All Members</label>
                            </div>
                            <div id="memberList" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var member in Model)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input member-checkbox" type="checkbox" name="SelectedMemberIds" value="@member.ID" id="member-@member.ID">
                                        <label class="form-check-label" for="member-@member.ID">@member.MemberName</label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Select Fields:</h6>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="selectAllFields">
                                <label class="form-check-label" for="selectAllFields">Select All Fields</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MemberName" id="field-MemberName" checked>
                                <label class="form-check-label" for="field-MemberName">Member Name</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="CompanySize" id="field-CompanySize">
                                <label class="form-check-label" for="field-CompanySize">Company Size</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Website" id="field-Website">
                                <label class="form-check-label" for="field-Website">Website</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MembershipStatus" id="field-MembershipStatus">
                                <label class="form-check-label" for="field-MembershipStatus">Membership Status</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="ContactedBy" id="field-ContactedBy">
                                <label class="form-check-label" for="field-ContactedBy">Contacted By</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="MemberSince" id="field-MemberSince">
                                <label class="form-check-label" for="field-MemberSince">Member Since</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Notes" id="field-Notes">
                                <label class="form-check-label" for="field-Notes">Notes</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Industries" id="field-Industries">
                                <label class="form-check-label" for="field-Industries">Industries</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Address" id="field-Address">
                                <label class="form-check-label" for="field-Address">Street Address</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="City" id="field-City">
                                <label class="form-check-label" for="field-City">City</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="Province" id="field-Province">
                                <label class="form-check-label" for="field-Province">Province</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input field-checkbox" type="checkbox" name="SelectedFields" value="PostalCode" id="field-PostalCode">
                                <label class="form-check-label" for="field-PostalCode">Postal Code</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="downloadExcelBtn">Download Excel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/excel.js"></script>
    <script src="~/js/member.js"></script>

    <script>
        $(document).ready(function () {
            var currentPage = 1;
            var recordsPerPage = parseInt($('#recordsPerPage').val());
            var currentView = 'cards'; // Default view

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // View toggle functionality
            $('#cards-view-btn').on('click', function() {
                $(this).addClass('active');
                $('#table-view-btn').removeClass('active');
                $('#cards-view').show();
                $('#table-view').hide();
                currentView = 'cards';
                updatePagination();
            });

            $('#table-view-btn').on('click', function() {
                $(this).addClass('active');
                $('#cards-view-btn').removeClass('active');
                $('#table-view').show();
                $('#cards-view').hide();
                currentView = 'table';
                updatePagination();
            });

            // Function to get visible rows (rows not hidden by filter)
            function getVisibleRows() {
                var nameFilter = $('#memberNameFilter').val().toLowerCase();
                var statusFilter = $('#membershipStatusFilter').val().toLowerCase();

                if (currentView === 'cards') {
                    return $('.member-card').filter(function () {
                        var nameText = $(this).data('name');
                        var statusText = $(this).data('status');
                        var nameMatch = nameFilter === "" || nameText.includes(nameFilter);
                        var statusMatch = statusFilter === "" || statusText === statusFilter;
                        return nameMatch && statusMatch;
                    });
                } else {
                    return $('#membersTable tbody tr').filter(function () {
                        var nameText = $(this).data('name');
                        var statusText = $(this).data('status');
                        var nameMatch = nameFilter === "" || nameText.includes(nameFilter);
                        var statusMatch = statusFilter === "" || statusText === statusFilter;
                        return nameMatch && statusMatch;
                    });
                }
            }

            // Function to show the current page
            function showPage(page) {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                // Ensure currentPage is within valid range
                if (page < 1) page = 1;
                if (page > totalPages) page = totalPages;

                var startIndex = (page - 1) * recordsPerPage;
                var endIndex = startIndex + recordsPerPage;

                if (currentView === 'cards') {
                    // Hide all cards first
                    $('.member-card').hide();
                    // Show only the cards for the current page
                    visibleRows.slice(startIndex, endIndex).show();
                } else {
                    // Hide all rows first
                    $('#membersTable tbody tr').hide();
                    // Show only the rows for the current page
                    visibleRows.slice(startIndex, endIndex).show();
                }

                // Update page info
                $('#pageInfo').text(`Page ${page} of ${totalPages} (${visibleRows.length} records)`);

                // Enable/disable pagination buttons
                $('#prevPage').prop('disabled', page === 1);
                $('#nextPage').prop('disabled', page === totalPages || visibleRows.length === 0);
            }

            // Function to update pagination
            function updatePagination() {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage > totalPages) {
                    currentPage = totalPages > 0 ? totalPages : 1;
                }

                showPage(currentPage);
            }

            // Event listener for records per page dropdown
            $('#recordsPerPage').on('change', function () {
                recordsPerPage = parseInt($(this).val());
                currentPage = 1; // Reset to the first page
                updatePagination();
            });

            // Event listener for previous page button
            $('#prevPage').on('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            // Event listener for next page button
            $('#nextPage').on('click', function () {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });

            // Filter function
            function filterTable() {
                currentPage = 1; // Reset to the first page
                updatePagination();
            }

            // Attach filter function to input events
            $('#memberNameFilter, #membershipStatusFilter').on('input change', filterTable);

            // Handle archive/unarchive functionality
            $('.archive-btn').on('click', function () {
                const memberId = $(this).data('id');
                const currentStatus = $(this).data('status').toLowerCase();
                const newStatus = (currentStatus === 'cancelled') ? 'GoodStanding' : 'Cancelled';
                const confirmMessage = (currentStatus === 'cancelled')
                    ? "Are you sure you want to unarchive this member?"
                    : "Are you sure you want to archive this member?";

                if (!confirm(confirmMessage)) {
                    return;
                }

                $.ajax({
                    url: '/Member/ToggleArchive',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        memberId: parseInt(memberId),
                        newStatus: newStatus
                    }),
                    success: function (data) {
                        alert(data.message);
                        location.reload();
                    },
                    error: function (error) {
                        console.error("Error:", error);
                        alert("Failed to update member status.");
                    }
                });
            });

            // Initial page load
            updatePagination();

            // Initial sort on page load
            sortTable(1, "asc");
        });

        // Sorting function
        function sortTable(columnIndex, initialDirection = "asc") {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("membersTable");
            switching = true;
            dir = initialDirection; // Default sorting direction

            // Determine the current sorting direction
            if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-asc")) {
                dir = "desc";
            } else if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-desc")) {
                dir = "asc";
            }

            // Remove sorting classes from all headers
            for (i = 0; i < table.rows[0].getElementsByTagName("th").length; i++) {
                table.rows[0].getElementsByTagName("th")[i].classList.remove("sorted-asc", "sorted-desc");
            }

            // Add sorting class to the clicked header
            table.rows[0].getElementsByTagName("th")[columnIndex].classList.add(dir === "asc" ? "sorted-asc" : "sorted-desc");

            // Perform sorting
            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (dir === "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir === "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }

            // Update pagination after sorting
            $(document).ready(function() {
                updatePagination();
            });
        }
    </script>
    <style>
        th {
            cursor: pointer;
        }

            th.sorted-asc::after {
                content: " ▲";
            }

            th.sorted-desc::after {
                content: " ▼";
            }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

            .pagination button {
                margin: 0 5px;
            }

        #pageInfo {
            margin: 0 10px;
            line-height: 2;
        }

        /* Pagination button styling */
        .pagination-btn {
            min-width: 100px;
            width: 100px;
            height: 38px;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.375rem 0.75rem;
        }

        .pagination-info {
            font-size: 14px;
            color: #6c757d;
            padding: 0 10px;
        }

        /* Custom alert styling to match the design */
        .alert-info {
            background-color: #e8f4ff;
            border: none;
            color: #2c5282;
            font-size: 14px;
            border-radius: 4px;
        }
    </style>
}