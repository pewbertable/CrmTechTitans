@model IEnumerable<CrmTechTitans.Models.Industry>
@using CrmTechTitans.Models.Enumerations

@{
    ViewData["Title"] = "All Industries";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<partial name="_Notification" />

<div class="crm-container">
    <!-- Main Content -->
    <div class="crm-container">
        <div class="main-content">
            <header class="page-header">
                <h1>All Industries</h1>
                <div class="d-flex align-items-center gap-3">
                    @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                    {
                        <a asp-action="Create" class="btn btn-danger" data-bs-toggle="tooltip" title="Add a new Industry to the system">
                            <i class="fas fa-user-plus"></i> Create New Industry
                        </a>
                    }
                </div>
            </header>

            <!-- Helper text for sorting -->
            <div class="alert alert-info mb-3">
                <i class="fas fa-info-circle"></i> Click on column headers to sort the table.
            </div>

            <!-- Filter Section -->
            <div class="filter-container">
                <div class="col-md-4">
                    <label for="SearchString" class="filter-label">Search Industry Name:</label>
                    <input type="text" id="SearchString" class="form-control search-input" placeholder="Enter industry name">
                </div>
                <div class="col-md-4">
                    <label for="NAICSCode" class="filter-label">Filter by NAICS Code:</label>
                    @Html.DropDownList("NAICSCode", ViewBag.NAICSCodeList as SelectList, "-- Select NAICS Code --", new { @class = "form-control filter-select" })
                </div>
            </div>

            <!-- Table View for Industries -->
            <section class="members-table-container">
                <table class="table custom-table" id="industriesTable">
                    <thead>
                        <tr>
                            <th onclick="sortTable(0)" class="sortable">Industry Name <i class="fas fa-sort"></i></th>
                            <th onclick="sortTable(1)" class="sortable">NAICS Code <i class="fas fa-sort"></i></th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.NAICS</td>
                                <td class="text-center action-buttons">
                                    <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-details">Details</a>
                                    @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                                    {
                                        <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-edit">Edit</a>
                                        <a asp-action="Delete" asp-route-id="@item.ID" class="btn btn-sm btn-danger">Delete</a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="col-md-4">
                    <label for="recordsPerPage">Records per page:</label>
                    <select id="recordsPerPage" class="form-control">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="15">15</option>
                        <option value="20">20</option>
                    </select>
                </div>

                <div id="paginationControls" class="pagination">
                    <button id="prevPage" class="btn btn-primary">Previous</button>
                    <span id="pageInfo"></span>
                    <button id="nextPage" class="btn btn-primary">Next</button>
                </div>

            </section>
        </div>
    </div>

</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            var currentPage = 1;
            var recordsPerPage = parseInt($('#recordsPerPage').val());

            // Function to get visible rows (rows not hidden by filter)
            function getVisibleRows() {
                var nameFilter = $('#SearchString').val().toLowerCase();
                var naicsFilter = $('#NAICSCode').val();

                var visibleRows = $('#industriesTable tbody tr').filter(function () {
                    var nameText = $(this).find('td:nth-child(1)').text().toLowerCase();
                    var naicsText = $(this).find('td:nth-child(2)').text();

                    var nameMatch = nameFilter === "" || nameText.includes(nameFilter);
                    var naicsMatch = naicsFilter === "" || naicsText === naicsFilter;

                    return nameMatch && naicsMatch;
                });

                return visibleRows;
            }

            // Function to show the current page
            function showPage(page) {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage);

                // Ensure currentPage is within valid range
                if (page < 1) page = 1;
                if (page > totalPages) page = totalPages;

                var startIndex = (page - 1) * recordsPerPage;
                var endIndex = startIndex + recordsPerPage;

                // Hide all rows first
                $('#industriesTable tbody tr').hide();

                // Show only the rows for the current page
                visibleRows.slice(startIndex, endIndex).show();

                // Update page info
                $('#pageInfo').text(`Page ${page} of ${totalPages}`);

                // Enable/disable pagination buttons
                $('#prevPage').prop('disabled', page === 1);
                $('#nextPage').prop('disabled', page === totalPages);
            }

            // Function to update pagination
            function updatePagination() {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage);

                if (currentPage > totalPages) {
                    currentPage = totalPages > 0 ? totalPages : 1;
                }

                showPage(currentPage);
            }

            // Event listener for records per page dropdown
            $('#recordsPerPage').on('change', function () {
                recordsPerPage = parseInt($(this).val());
                currentPage = 1; // Reset to the first page
                updatePagination();
            });

            // Event listener for previous page button
            $('#prevPage').on('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            // Event listener for next page button
            $('#nextPage').on('click', function () {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage);

                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });

            // Filter function
            function filterTable() {
                currentPage = 1; // Reset to the first page
                updatePagination();
            }

            // Attach filter function to input events
            $('#SearchString, #NAICSCode').on('input change', filterTable);

            // Initial page load
            updatePagination();

            // Initial sort on page load
            sortTable(0, "asc");
        });

        // Sorting function
        function sortTable(columnIndex, initialDirection = "asc") {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("industriesTable");
            switching = true;
            dir = initialDirection; // Default sorting direction

            // Determine the current sorting direction
            if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-asc")) {
                dir = "desc";
            } else if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-desc")) {
                dir = "asc";
            }

            // Remove sorting classes from all headers
            for (i = 0; i < table.rows[0].getElementsByTagName("th").length; i++) {
                table.rows[0].getElementsByTagName("th")[i].classList.remove("sorted-asc", "sorted-desc");
            }

            // Add sorting class to the clicked header
            table.rows[0].getElementsByTagName("th")[columnIndex].classList.add(dir === "asc" ? "sorted-asc" : "sorted-desc");

            // Update sort icon for all headers
            for (i = 0; i < 2; i++) { // Only for sortable columns (0-1)
                if (i !== columnIndex) {
                    var iconElement = table.rows[0].getElementsByTagName("th")[i].querySelector(".fas");
                    if (iconElement) {
                        iconElement.className = "fas fa-sort";
                    }
                }
            }

            // Update the icon for the sorted column
            var sortedIconElement = table.rows[0].getElementsByTagName("th")[columnIndex].querySelector(".fas");
            if (sortedIconElement) {
                sortedIconElement.className = dir === "asc" ? "fas fa-sort-up" : "fas fa-sort-down";
            }

            // Perform sorting
            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (dir === "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir === "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>

    <style>
        /* Styling for sortable columns */
        .sortable {
            position: relative;
            cursor: pointer;
        }

            .sortable:hover {
                background-color: #f5f5f5;
            }

            .sortable .fas {
                margin-left: 5px;
                color: #aaa;
            }

        .sorted-asc .fa-sort-up,
        .sorted-desc .fa-sort-down {
            color: #333;
        }

        /* Original styles */
        th {
            cursor: pointer;
        }

            th.sorted-asc::after {
                content: ""; /* Removed as we're using Font Awesome icons now */
            }

            th.sorted-desc::after {
                content: ""; /* Removed as we're using Font Awesome icons now */
            }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

            .pagination button {
                margin: 0 5px;
            }

        #pageInfo {
            margin: 0 10px;
            line-height: 2;
        }
    </style>
}