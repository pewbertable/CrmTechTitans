@model IEnumerable<CrmTechTitans.Models.Contact>
@using CrmTechTitans.Models.Enumerations

@{
    ViewData["Title"] = "All Contacts";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<partial name="_Notification" />

<div class="container-fluid">
    <header class="page-header d-flex justify-content-between align-items-center mb-4">
        <h1>All Contacts</h1>
        <div class="d-flex align-items-center gap-3">
            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
            {
                <a asp-action="Create" class="btn btn-primary" data-bs-toggle="tooltip" title="Add a new Contact to the system">
                    <i class="fas fa-user-plus"></i> Create New Contact
                </a>
            }
        </div>
    </header>

    <!-- Filter Section -->
    <section class="filter-container bg-light p-3 rounded mb-4">
        <div class="filter-row d-flex align-items-end gap-3">
            <!-- Filter by Name -->
            <div class="filter-item">
                <label for="nameFilter" class="form-label">Search by Name</label>
                <input type="text" id="nameFilter" class="form-control" placeholder="Enter contact name" data-bs-toggle="tooltip" title="Enter a contact's full or partial name">
            </div>

            <!-- Filter by Email -->
            <div class="filter-item">
                <label for="emailFilter" class="form-label">Search by Email</label>
                <input type="text" id="emailFilter" class="form-control" placeholder="Enter email" data-bs-toggle="tooltip" title="Enter a contact's email address to filter">
            </div>
        </div>
        
        <!-- Filtered By Indicator -->
        <div id="filterStatus" class="text-end mt-3">
            <span class="text-secondary fs-6">
                <i class="fas fa-filter me-1"></i> Filtered by: <span id="activeFilters">No filters</span>
            </span>
        </div>
    </section>

    <!-- Contacts Table -->
    <section class="table-responsive">
        <!-- Helper text for sorting -->
        <div class="alert alert-info d-flex align-items-center py-2" role="alert">
            <i class="fas fa-info-circle me-2"></i>
            Click on column headers to sort the table.
        </div>

        <table class="table custom-table" id="contactsTable">
            <thead>
                <tr>
                    <th class="sortable">Photo <i class="fas fa-sort"></i></th> 
                    <th class="sortable">Full Name <i class="fas fa-sort"></i></th>
                    <th class="sortable">Company <i class="fas fa-sort"></i></th>
                    <th class="sortable">Email <i class="fas fa-sort"></i></th>
                    <th class="sortable">Phone <i class="fas fa-sort"></i></th>
                    <th class="text-center actions-column">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <div class="logo-container">
                                @if (item.ContactThumbnail?.Content != null)
                                {
                                    string imageBase64 = Convert.ToBase64String(item.ContactThumbnail.Content);
                                    string imageSrc = string.Format("data:" + item.ContactThumbnail.MimeType + ";base64,{0}", imageBase64);
                                    <img src="@imageSrc" alt="Profile Picture of @item?.FullFormalName"
                                         title="Profile Picture of @item?.FullFormalName" class="member-logo" />
                                }
                                else
                                {
                                    <div class="placeholder-logo">
                                        <i class="fas fa-user"></i>
                                    </div>
                                }
                            </div>
                        </td>
                        <td data-bs-toggle="tooltip" title="@item.FullFormalName">@item.FullFormalName</td>
                        <td data-bs-toggle="tooltip" title="@(item.MemberContacts.Any()
                                ? string.Join(", ", item.MemberContacts
                                .Where(mc => mc.Member != null)
                                .Select(mc => mc.Member.MemberName))
                                : "No Company Associated")">
                            @(item.MemberContacts.Any()
                                ? string.Join(", ", item.MemberContacts
                                .Where(mc => mc.Member != null)
                                .Select(mc => mc.Member.MemberName))
                                : "No Company Associated")
                        </td>
                        <td data-bs-toggle="tooltip" title="@item.Email">@item.Email</td>
                        <td data-bs-toggle="tooltip" title="@item.FormattedPhone">@item.FormattedPhone</td>
                        <td class="text-center actions-column">
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="View contact details">Details</a>
                            @if (Context.User.IsInRole(UserRoles.Administrator) || Context.User.IsInRole(UserRoles.Editor))
                            {
                                <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="Edit contact">Edit</a>
                                <a asp-action="Delete" asp-route-id="@item.ID" class="btn btn-sm btn-danger" data-bs-toggle="tooltip" title="Delete contact">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    <!-- Pagination Controls -->
    <div class="row mt-4">
        <!-- Records per page -->
        <div class="col-md-4">
            <label for="recordsPerPage">Records per page:</label>
            <select id="recordsPerPage" class="form-control">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
        </div>
        <!-- Pagination Controls -->
        <div id="paginationControls" class="col-md-8 d-flex justify-content-end align-items-center gap-3">
            <button id="prevPage" class="btn btn-primary pagination-btn">Previous</button>
            <span id="pageInfo" class="pagination-info">Page 1 of 1 (0 records)</span>
            <button id="nextPage" class="btn btn-primary pagination-btn">Next</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var currentPage = 1;
            var recordsPerPage = parseInt($('#recordsPerPage').val());

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Function to get visible rows (rows not hidden by filter)
            function getVisibleRows() {
                var nameFilter = $('#nameFilter').val().toLowerCase();
                var emailFilter = $('#emailFilter').val().toLowerCase();

                var visibleRows = $('#contactsTable tbody tr').filter(function () {
                    var nameText = $(this).find('td:nth-child(2)').text().toLowerCase();
                    var emailText = $(this).find('td:nth-child(4)').text().toLowerCase();

                    var nameMatch = nameFilter === "" || nameText.includes(nameFilter);
                    var emailMatch = emailFilter === "" || emailText.includes(emailFilter);

                    return nameMatch && emailMatch;
                });

                return visibleRows;
            }

            // Function to show the current page
            function showPage(page) {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                // Ensure currentPage is within valid range
                if (page < 1) page = 1;
                if (page > totalPages) page = totalPages;

                var startIndex = (page - 1) * recordsPerPage;
                var endIndex = startIndex + recordsPerPage;

                // Hide all rows first
                $('#contactsTable tbody tr').hide();

                // Show only the rows for the current page
                visibleRows.slice(startIndex, endIndex).show();

                // Update page info
                $('#pageInfo').text(`Page ${page} of ${totalPages} (${visibleRows.length} records)`);

                // Enable/disable pagination buttons
                $('#prevPage').prop('disabled', page === 1);
                $('#nextPage').prop('disabled', page === totalPages || visibleRows.length === 0);
            }

            // Function to update pagination
            window.updatePagination = function() {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage > totalPages) {
                    currentPage = totalPages > 0 ? totalPages : 1;
                }

                showPage(currentPage);
            }

            // Event listener for records per page dropdown
            $('#recordsPerPage').on('change', function () {
                recordsPerPage = parseInt($(this).val());
                currentPage = 1; // Reset to the first page
                updatePagination();
            });

            // Event listener for previous page button
            $('#prevPage').on('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            // Event listener for next page button
            $('#nextPage').on('click', function () {
                var visibleRows = getVisibleRows();
                var totalPages = Math.ceil(visibleRows.length / recordsPerPage) || 1;

                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });

            // Filter function
            function filterTable() {
                currentPage = 1; // Reset to the first page
                updatePagination();
            }

            // Attach filter function to input events
            $('#nameFilter, #emailFilter').on('input', filterTable);
            
            // Update filter status indicators whenever filters change
            function updateFilterStatus() {
                var activeFilters = [];
                
                // Check if name filter is active
                var nameFilter = $('#nameFilter').val();
                if (nameFilter && nameFilter.trim() !== '') {
                    activeFilters.push('Name: "' + nameFilter + '"');
                }
                
                // Check if email filter is active
                var emailFilter = $('#emailFilter').val();
                if (emailFilter && emailFilter.trim() !== '') {
                    activeFilters.push('Email: "' + emailFilter + '"');
                }
                
                // Update the filter status display
                if (activeFilters.length > 0) {
                    $('#activeFilters').text(activeFilters.join(', '));
                } else {
                    $('#activeFilters').text('No filters');
                }
                $('#filterStatus').show();
            }
            
            // Call updateFilterStatus whenever filters change
            $('#nameFilter, #emailFilter').on('input', updateFilterStatus);
            
            // Initialize filter status on page load
            updateFilterStatus();

            // Initial page load
            updatePagination();

            // Initial sort on page load
            sortTable(1, "asc");
        });

        // Sorting function
        function sortTable(columnIndex, initialDirection = "asc") {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("contactsTable");
            switching = true;
            dir = initialDirection; // Default sorting direction

            // Determine the current sorting direction
            if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-asc")) {
                dir = "desc";
            } else if (table.rows[0].getElementsByTagName("th")[columnIndex].classList.contains("sorted-desc")) {
                dir = "asc";
            }

            // Remove sorting classes from all headers
            for (i = 0; i < table.rows[0].getElementsByTagName("th").length; i++) {
                table.rows[0].getElementsByTagName("th")[i].classList.remove("sorted-asc", "sorted-desc");
            }

            // Add sorting class to the clicked header
            table.rows[0].getElementsByTagName("th")[columnIndex].classList.add(dir === "asc" ? "sorted-asc" : "sorted-desc");

            // Update sort icon for all headers
            for (i = 1; i < 5; i++) { // Only for sortable columns (1-4)
                if (i !== columnIndex) {
                    var iconElement = table.rows[0].getElementsByTagName("th")[i].querySelector(".fas");
                    if (iconElement) {
                        iconElement.className = "fas fa-sort";
                    }
                }
            }

            // Update the icon for the sorted column
            var sortedIconElement = table.rows[0].getElementsByTagName("th")[columnIndex].querySelector(".fas");
            if (sortedIconElement) {
                sortedIconElement.className = dir === "asc" ? "fas fa-sort-up" : "fas fa-sort-down";
            }

            // Perform sorting
            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (dir === "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir === "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }

            // Update pagination after sorting
            $(document).ready(function() {
                updatePagination();
            });
        }
    </script>

    <style>
        /* Pagination button styling */
        .pagination-btn {
            min-width: 100px;
            width: 100px;
            height: 38px;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.375rem 0.75rem;
        }

        .pagination-info {
            font-size: 14px;
            color: #6c757d;
            padding: 0 10px;
        }

        /* Custom alert styling to match the design */
        .alert-info {
            background-color: #e8f4ff;
            border: none;
            color: #2c5282;
            font-size: 14px;
            border-radius: 4px;
        }
    </style>
}